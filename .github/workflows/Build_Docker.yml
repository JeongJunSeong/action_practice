name: Build Docker

on:
  push:
    branches:
      - 'main'                  # main 브랜치에서만 실행
    paths:
      - 'requirements.txt'      # requirements.txt 파일이 변경되었을 때
      - 'Dockerfile'             # Dockerfile 파일이 변경되었을 때
      - 'docker-compose.yaml'    # docker-compose.yaml 파일이 변경되었을 때
  pull_request:
    branches:
      - 'main'                  # main 브랜치에서만 실행
    paths:
      - 'requirements.txt'      # requirements.txt 파일이 변경되었을 때
      - 'Dockerfile'             # Dockerfile 파일이 변경되었을 때
      - 'docker-compose.yaml'    # docker-compose.yaml 파일이 변경되었을 때
  
jobs:
  build-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/requirements.txt', '**/docker-compose.yaml') }}
          restore-keys: |
            ${{ runner.os }}-docker-
            
      # Docker 이미지 빌드
      - name: Build Docker image using Docker Compose
        run: |
          echo "Starting Docker Compose build..."
          docker-compose build 
          echo "Docker Compose build completed."

      # 이미지 확인
      - name: Verify Docker images
        run: |
          echo "Verifying Docker images..."
          docker images | grep airflow-airflow-webserver || echo "airflow-airflow-webserver not found!"
          docker images | grep airflow-airflow-triggerer || echo "airflow-airflow-triggerer not found!"
          docker images | grep airflow-airflow-worker || echo "airflow-airflow-worker not found!"
          docker images | grep airflow-airflow-scheduler || echo "airflow-airflow-scheduler not found!"
          docker images | grep airflow-airflow-init || echo "airflow-airflow-init not found!"
          docker images | grep redis || echo "redis not found!"
          docker images | grep adminer || echo "adminer not found!"
          docker images | grep mariadb || echo "mariadb not found!"
          echo "Docker image verification completed."


      # 설치된 패키지 확인
      - name: List installed packages
        run: |
          echo "Listing installed packages..."
          docker run --rm my-airflow pip list || echo "No packages found!"
          echo "Package listing completed."
